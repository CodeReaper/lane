#!/bin/sh
set -e

export TMP=$(mktemp -dq)

trap 'set +x; rm -rf $TMP 2>/dev/null 2>&1' 0
trap 'exit 2' 1 2 3 15

_LOAD_CONFIGURATION_FILE()
{
    if [ ! -f "${1}" ]; then
        echo "Add ${0}.ini for this lane to run"
        exit 1
    fi

    export INPUT=$(grep -E '^INPUT\s?=' "${1}" | cut -d= -f2-)
    export MAIN_LANGUAGE=$(grep -E '^MAIN_LANGUAGE\s?=' "${1}" | cut -d= -f2-)
    export KEY_ROW=$(grep -E '^KEY_ROW\s?=' "${1}" | cut -d= -f2-)
    export CONFIGURATION=$(grep -E '^CONFIGURATION\s?=' "${1}" | cut -d= -f2-)
    export OUTPUT=$(grep -E '^OUTPUT\s?=' "${1}" | cut -d= -f2-)
}

_CHECK_ARGUMENTS()
{
    if [ -z "$INPUT" ] || [ ! -f "$INPUT" ]; then
        echo "Configuration setting for 'INPUT' is missing or not a directory. Found: $INPUT"
        exit 1
    fi
    if [ "$OUTPUT_TYPE" = "ios" ]; then
        if [ -z "$MAIN_LANGUAGE" ]; then
            echo "Configuration setting for 'MAIN_LANGUAGE' is missing."
            exit 1
        fi
        if [ -z "$KEY_ROW" ]; then
            echo "Configuration setting for 'KEY_ROW' is missing."
            exit 1
        fi
        if [ -z "$OUTPUT" ]; then
            echo "Configuration setting for 'OUTPUT' is missing."
            exit 1
        fi
    fi
}

_CHECK_CONFIGURATION()
{
    if [ -z "$1" ]; then
        echo "Configuration file is missing the 'CONFIGURATION' setting."
        exit 1
    fi

    if [ ! -d "$1/input" ] || [ ! -d "$1/output" ]; then
        echo "The 'CONFIGURATION' setting must point to a directory with both an input and an output directory."
        exit 1
    fi

    if [ ! -f "$1/.type" ]; then
        echo "The 'CONFIGURATION' setting must point to a .type file containing the output type."
        exit 1
    fi

    if $(grep -qi 'ios' "$1/.type"); then
        export OUTPUT_TYPE=ios
    elif $(grep -qi 'android' "$1/.type"); then
        export OUTPUT_TYPE=android
    else
        printf "The output type is not supported, found: "
        cat "$1/.type"
        echo
        exit 1
    fi
}

_UNPACK_CSV()
{
    find "$CONFIGURATION/input" -type f -exec sh -c '
        OFFSET=$(cat "$1" | tr -d "[:blank:]")
        LANG=$(basename "$1")
        tail +2 "./$INPUT" | grep -v ^$ | sed '\''s|\\;|\\\\\\|g'\'' | cut -d\; -f$KEY_ROW,$OFFSET | sed '\''s|\\\\\\|;|g'\'' | sort > "${TMP}/${LANG}.csv"
    ' -- {} \;
}

_GENERATE_XML()
{
    find "$CONFIGURATION/output" -type f  -exec sh -c '
        LANG=$(basename "$1")
        FILE=$(cat "$1" | tr -d "[:blank:]")
        OUTPUT_DIRECTORY=$(dirname "$FILE")
        mkdir -p "$OUTPUT_DIRECTORY" 2>/dev/null
        echo "<resources>" > "$FILE"
        cat "${TMP}/${LANG}.csv"| while read LINE; do
            KEY=$(echo "$LINE" | cut -d\; -f1 | tr "[:upper:]" "[:lower:]")
            VALUE=$(echo "$LINE" | cut -d\; -f2- | sed -E '\''s|(%[0-9]+)|\1$s|g;s|%|%%|g'\'')
            printf "\t<string name=\"$KEY\">$VALUE</string>\n" >> "$FILE"
        done
        echo "</resources>" >> "$FILE"
    ' -- {} \;
}

_GENERATE_STRINGS()
{
    find "$CONFIGURATION/output" -type f -exec sh -c '
        LANG=$(basename "$1")
        cat "$1" | grep -v ^$ | while read FILE; do
            OUTPUT_DIRECTORY=$(dirname "$FILE")
            mkdir -p "$OUTPUT_DIRECTORY" 2>/dev/null
            printf "" > "$FILE"
            cat "${TMP}/${LANG}.csv"| while read LINE; do
                KEY=$(echo "$LINE" | cut -d\; -f1)
                VALUE=$(echo "$LINE" | cut -d\; -f2- | sed '\''s|\"|\\"|g'\'')
                echo "\"$KEY\" = \"$VALUE\";" >> "$FILE"
            done
        done
    ' -- {} \;
}

_GENERATE_STRUCT()
{
    echo '// swiftlint:disable all'
    echo 'import Foundation'
    echo 'struct Translations {'

    cat "${TMP}/${MAIN_LANGUAGE}.csv"| while read ITEM; do
        KEY=$(echo "$ITEM" | cut -d\; -f1)
        VALUE=$(echo "$ITEM" | cut -d\; -f2-)
        PARAMETERS=$(echo $VALUE | grep -o -E '%[0-9]+' | wc -l | tr -d ' \n')

        if [[ $PARAMETERS -eq 0 ]]; then
            printf "\tstatic let ${KEY} = NSLocalizedString(\"${KEY}\", comment: \"\")\n"
        else
            ARGUMENTS=$(for i in $(seq 1 $PARAMETERS); do printf "p$i: String, _ "; done | rev | cut -c5- | rev)
            REPLACEMENTS=$(for i in $(seq 1 $PARAMETERS); do printf ".replacingOccurrences(of: \"%%%%${i}\", with: p${i})"; done)
            printf "\tstatic func ${KEY}(_ ${ARGUMENTS}) -> String {"
            printf " return NSLocalizedString(\"${KEY}\", comment: \"\")"
            printf "${REPLACEMENTS}"
            echo " }"
        fi
    done

    echo '}'
}

_LOAD_CONFIGURATION_FILE "$1"

_CHECK_CONFIGURATION "$CONFIGURATION"

_CHECK_ARGUMENTS

_UNPACK_CSV

if [ "$OUTPUT_TYPE" = "ios" ]; then
    _GENERATE_STRINGS

    OUTPUT_DIRECTORY=$(dirname "$OUTPUT")
    mkdir -p "$OUTPUT_DIRECTORY" 2>/dev/null
    _GENERATE_STRUCT > "$OUTPUT"
fi

if [ "$OUTPUT_TYPE" = "android" ]; then
    _GENERATE_XML
fi
